// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetYoga.Infrastructure;

#nullable disable

namespace ProjetYoga.Infrastructure.Migrations
{
    [DbContext(typeof(ProjetYogaContext))]
    [Migration("20250422075001_DataSeed2")]
    partial class DataSeed2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id_Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Address"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberStreet")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id_Address");

                    b.ToTable("Address", (string)null);

                    b.HasData(
                        new
                        {
                            Id_Address = 1,
                            City = "Bruxelles",
                            Country = "Belgique",
                            NumberStreet = 123,
                            PostalCode = "1040",
                            Street = "Rue du parc Saint-Antoine"
                        },
                        new
                        {
                            Id_Address = 2,
                            City = "Bxl",
                            Country = "Belgium",
                            NumberStreet = 42,
                            PostalCode = "1000",
                            Street = "rue des marroniers"
                        });
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id_Event")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Event"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_PlaceEventYoga")
                        .HasColumnType("int");

                    b.Property<int>("MaxSub")
                        .HasColumnType("int");

                    b.Property<int?>("MinSub")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id_Event");

                    b.HasIndex("Id_PlaceEventYoga");

                    b.ToTable("Event", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id_Event = 1,
                            Available = true,
                            Description = "chants, postures, méditation",
                            EndDate = new DateTime(2025, 5, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Id_PlaceEventYoga = 1,
                            MaxSub = 15,
                            MinSub = 3,
                            StartDate = new DateTime(2025, 5, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "matinée viniyoga"
                        });
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.PaymentMode", b =>
                {
                    b.Property<int>("Id_PaymentMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_PaymentMode"));

                    b.Property<string>("Name_PaymentMode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_PaymentMode");

                    b.ToTable("PaymentModes", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.PlaceEventYoga", b =>
                {
                    b.Property<int>("Id_PlaceEventYoga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_PlaceEventYoga"));

                    b.Property<int>("Id_Address")
                        .HasColumnType("int");

                    b.Property<string>("NamePlaceEventYoga")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id_PlaceEventYoga");

                    b.HasIndex("Id_Address")
                        .IsUnique();

                    b.ToTable("PlaceEventYoga", (string)null);

                    b.HasData(
                        new
                        {
                            Id_PlaceEventYoga = 1,
                            Id_Address = 1,
                            NamePlaceEventYoga = "Studio du Parc Antoine"
                        });
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int>("Id_Event")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Payed")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentModeId")
                        .HasColumnType("int");

                    b.HasKey("Id_User", "Id_Event");

                    b.HasIndex("Id_Event");

                    b.HasIndex("PaymentModeId");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.TypeSub", b =>
                {
                    b.Property<int>("Id_TypeSub")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_TypeSub"));

                    b.Property<string>("DescriptionTypeSub")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameTypeSub")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_TypeSub");

                    b.ToTable("TypeSub", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_User"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id_User");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Salt")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id_User = 1,
                            Email = "lauravdn@gmail.com",
                            Password = "	�����}�𛉻���jV�+Qyp�@���c\r�Z�������7�.7�~�\\�Oa����2�k��:",
                            Salt = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.User_TypeSub", b =>
                {
                    b.Property<int>("Id_User")
                        .HasColumnType("int");

                    b.Property<int>("Id_TypeSub")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSub")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_PaymentMode")
                        .HasColumnType("int");

                    b.Property<bool>("Payed")
                        .HasColumnType("bit");

                    b.HasKey("Id_User", "Id_TypeSub");

                    b.HasIndex("Id_PaymentMode");

                    b.HasIndex("Id_TypeSub");

                    b.ToTable("User_TypeSub", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.GroupSession", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.Event");

                    b.Property<string>("DaysAndHours")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("GroupSession", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.IndividualSession", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.Event");

                    b.ToTable("IndividualSession", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.SpecialEvent", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.Event");

                    b.ToTable("SpecialEvent", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Adept", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.User");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Address")
                        .HasColumnType("int");

                    b.Property<string>("LastnameAdept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAdept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NissAdept")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("PhoneAdept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("Id_Address");

                    b.ToTable("Adept", (string)null);

                    b.HasData(
                        new
                        {
                            Id_User = 3,
                            Email = "lykhun@gmail.com",
                            Password = "���?=�\0�J��M^/����DH׊�P��H�QNLO`�p*Rc<Q��^Ɗ�Z7������",
                            Salt = new Guid("a802db70-4c4d-4e0d-80b1-9ec3f61608c8"),
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id_Address = 2,
                            LastnameAdept = "Ly",
                            NameAdept = "Khun",
                            NissAdept = "82050620316",
                            PhoneAdept = "0000000"
                        });
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Instructor", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Instructor");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Event", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.PlaceEventYoga", "PlaceEventYoga")
                        .WithMany("Events")
                        .HasForeignKey("Id_PlaceEventYoga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceEventYoga");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.PlaceEventYoga", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Address", "Address")
                        .WithOne("PlaceEventYoga")
                        .HasForeignKey("ProjetYoga.Domain.Entities.PlaceEventYoga", "Id_Address")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Event", "Event")
                        .WithMany("Reservations")
                        .HasForeignKey("Id_Event")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetYoga.Domain.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetYoga.Domain.Entities.PaymentMode", "PaymentMode")
                        .WithMany("Reservations")
                        .HasForeignKey("PaymentModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("PaymentMode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.User_TypeSub", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.PaymentMode", "PaymentMode")
                        .WithMany("User_TypeSubs")
                        .HasForeignKey("Id_PaymentMode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetYoga.Domain.Entities.TypeSub", "TypeSub")
                        .WithMany("User_TypeSubs")
                        .HasForeignKey("Id_TypeSub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetYoga.Domain.Entities.User", "User")
                        .WithMany("User_TypeSubs")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMode");

                    b.Navigation("TypeSub");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.GroupSession", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Event", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.GroupSession", "Id_Event")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.IndividualSession", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Event", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.IndividualSession", "Id_Event")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.SpecialEvent", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Event", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.SpecialEvent", "Id_Event")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Adept", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Address", "Address")
                        .WithMany("Adepts")
                        .HasForeignKey("Id_Address")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjetYoga.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.Adept", "Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Instructor", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.Instructor", "Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Address", b =>
                {
                    b.Navigation("Adepts");

                    b.Navigation("PlaceEventYoga")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Event", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.PaymentMode", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("User_TypeSubs");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.PlaceEventYoga", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.TypeSub", b =>
                {
                    b.Navigation("User_TypeSubs");
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("User_TypeSubs");
                });
#pragma warning restore 612, 618
        }
    }
}
