// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetYoga.Infrastructure;

#nullable disable

namespace ProjetYoga.Infrastructure.Migrations
{
    [DbContext(typeof(ProjetYogaContext))]
    [Migration("20250414094317_specialEvent")]
    partial class specialEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id_Event")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Event"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxSub")
                        .HasColumnType("int");

                    b.Property<int?>("MinSub")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id_Event");

                    b.ToTable("Event", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.PlaceEventYoga", b =>
                {
                    b.Property<int>("id_PlaceEventYoga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_PlaceEventYoga"));

                    b.Property<string>("namePlaceEventYoga")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id_PlaceEventYoga");

                    b.ToTable("PlaceEventYoga", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.TypeSub", b =>
                {
                    b.Property<int>("Id_TypeSub")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_TypeSub"));

                    b.Property<string>("DescriptionTypeSub")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameTypeSub")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_TypeSub");

                    b.ToTable("TypeSub", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_User"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_User");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.GroupSession", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.Event");

                    b.Property<string>("DaysAndHours")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("GroupSession", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.IndividualSession", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.Event");

                    b.ToTable("IndividualSession", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.SpecialEvent", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.Event");

                    b.ToTable("SpecialEvent", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Adept", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.User");

                    b.Property<string>("LastnameAdept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAdept")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NissAdept")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("PhoneAdept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Adept", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Instructor", b =>
                {
                    b.HasBaseType("ProjetYoga.Domain.Entities.User");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Instructor");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.GroupSession", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Event", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.GroupSession", "Id_Event")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.IndividualSession", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Event", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.IndividualSession", "Id_Event")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.SpecialEvent", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.Event", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.SpecialEvent", "Id_Event")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Adept", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.Adept", "Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetYoga.Domain.Entities.Instructor", b =>
                {
                    b.HasOne("ProjetYoga.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("ProjetYoga.Domain.Entities.Instructor", "Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
